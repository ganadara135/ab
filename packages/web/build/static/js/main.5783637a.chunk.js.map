{"version":3,"sources":["../../src/index.ts","../../../src/yupSchemas/user.ts","serviceWorker.ts","apollo.tsx","../../../../src/modules/RegisterController/index.tsx","modules/shared/InputField.tsx","modules/register/ui/RegisterView.tsx","modules/register/RegisterConnector.tsx","index.tsx","routes/index.tsx"],"names":["string","min","exports","passwordNotLongEnough","max","required","Boolean","window","location","hostname","match","client","ApolloClient","link","HttpLink","uri","process","credentials","cache","InMemoryCache","InputField","field","form","touched","errors","props","errorMsg","name","Item","help","validateStatus","undefined","C","style","display","width","margin","prefix","type","color","placeholder","component","className","href","htmlType","React","RegisterView","withFormik","validationSchema","validUserSchema","mapPropsToValues","email","password","handleSubmit","values","a","setErrors","submit","RegisterConnector","RegisterController","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5783637a.chunk.js","sourcesContent":["export * from \"./modules/RegisterController\";\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst yup = require(\"yup\");\nexports.emailNotLongEnough = \"email must be at least 3 characters\";\nexports.passwordNotLongEnough = \"password must be at least 3 characters\";\nexports.invalidEmail = \"email must be a valid email\";\nexports.registerPasswordValidation = yup\n    .string()\n    .min(3, exports.passwordNotLongEnough)\n    .max(255)\n    .required();\nexports.validUserSchema = yup.object().shape({\n    email: yup\n        .string()\n        .min(3, exports.emailNotLongEnough)\n        .max(255)\n        .email(exports.invalidEmail)\n        .required(),\n    password: exports.registerPasswordValidation\n});\n//# sourceMappingURL=user.js.map","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\n\nexport const client = new ApolloClient({\n    link: new HttpLink({\n        uri: process.env.REACT_APP_SERVER_URL,  // \"http://localhost:4000\",\n        credentials: \"include\"\n    }),\n    cache: new InMemoryCache()\n});","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport * as React from 'react';\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nvar C = /** @class */ (function (_super) {\n    __extends(C, _super);\n    function C() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.submit = function (values) { return __awaiter(_this, void 0, void 0, function () {\n            var response;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        console.log(values);\n                        return [4 /*yield*/, this.props.mutate({\n                                variables: values\n                            })];\n                    case 1:\n                        response = _a.sent();\n                        console.log('response : ', response);\n                        return [2 /*return*/, null];\n                }\n            });\n        }); };\n        return _this;\n    }\n    C.prototype.render = function () {\n        return this.props.children({ submit: this.submit });\n    };\n    return C;\n}(React.PureComponent));\nvar registerMutation = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n    mutation RegisterMutation($email: String!, $password: String!){\\n        register(email: $email, password: $password){\\n            path\\n            message\\n        }\\n    }\\n\"], [\"\\n    mutation RegisterMutation($email: String!, $password: String!){\\n        register(email: $email, password: $password){\\n            path\\n            message\\n        }\\n    }\\n\"])));\nexport var RegisterController = graphql(registerMutation)(C);\nvar templateObject_1;\n//# sourceMappingURL=index.js.map","import * as React from \"react\";\nimport { FieldProps } from \"formik\";\nimport { Form, Input } from 'antd';\n\n\nexport const InputField: React.SFC<FieldProps<any> & { prefix: React.ReactNode }> = ({\n    field,\n    form: { touched, errors },\n    ...props\n}) => {\n\n    const errorMsg = touched[field.name] && errors[field.name];\n\n    return (\n        <Form.Item \n            help={errorMsg}\n            validateStatus={errorMsg ? \"error\" : undefined } \n        >\n            <Input {...field} {...props} />\n        </Form.Item>\n    );\n};","import * as React from \"react\";\nimport { Form as AntForm, Icon, Button, Checkbox } from 'antd';\nimport { withFormik, FormikErrors, FormikProps, Field, Form } from 'formik';\nimport { validUserSchema } from \"@abb/common\";\nimport { InputField } from \"../../shared/InputField\";\n\ninterface FormValues {\n    email: string;\n    password : string;\n}\ninterface Props {\n    submit: (values: FormValues) => Promise<FormikErrors<FormValues> | null>;\n}\nclass C extends React.PureComponent<FormikProps<FormValues> & Props> {\n    \n    render() {\n       // const { handleSubmit, errors} = this.props;\n       // console.log(errors);\n        return (\n          <Form style={{ display: \"flex\" }}> \n          <div style={{width: 400, margin:'auto'}}>\n          {/* <Form onSubmit={this.handleSubmit} className=\"login-form\"> */}\n            <Field  \n              name=\"email\"\n              prefix={\n                <Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} /> as any\n              }\n              placeholder=\"Email\"\n              component={InputField}\n            />\n            <Field  \n              name=\"password\"\n              prefix={\n                <Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} /> as any\n              }\n              placeholder=\"Password\"\n              component={InputField}\n            />\n       \n            <AntForm>\n              <Checkbox>Remember me</Checkbox>\n              <a className=\"login-form-forgot\" href=\"\">\n                Forgot password\n              </a>\n            </AntForm>\n            <AntForm>\n              <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                Register\n              </Button>\n            </AntForm>\n            <AntForm>\n              Or <a href=\"\">Login now!</a>\n            </AntForm>\n            </div>\n          </Form>\n        );\n    }\n}\n\n\n\n\n\nexport const RegisterView = withFormik<Props, FormValues>({\n    validationSchema: validUserSchema,\n    // validateOnChange : false,\n    // validateOnBlur: false,\n    mapPropsToValues: () => ({ email: \"\", password: \"\" }),\n    handleSubmit: async (values, {props, setErrors}) => {\n        const errors = await props.submit(values);\n        if(errors){\n            setErrors(errors)\n        }\n    }\n})(C);","import * as React from \"react\";\nimport {RegisterController} from '@abb/controller';\n\nimport { RegisterView } from \"./ui/RegisterView\";\n\n\n// container -> view\n// container -> connector -> view\n// controller -> connector -> view\n\n\n// export const RegisterConnector = () => <RegisterView/>;\n\nexport class RegisterConnector extends React.PureComponent {\n    // dummySubmit = async (values: any) => {\n    //     console.log(values);\n    //     return null;\n    // };\n\n    render() {\n        return (\n        <RegisterController >\n\n           {({ submit }) => <RegisterView submit={submit} />} \n        </RegisterController>\n  \n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n\nimport {ApolloProvider } from 'react-apollo';\n\n// import App from './App'; \nimport * as serviceWorker from './serviceWorker';\nimport { client } from \"./apollo\";\nimport { Routes } from './routes';\nimport \"./index.css\";\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <ApolloProvider client={client}>\n        {/* <App /> */}\n        <Routes />\n        {/* <div>\n            <h2>My first Apollo app</h2>\n        </div> */}\n    </ApolloProvider>,\n    document.getElementById(\"root\") as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// serviceWorker.register();\n","import * as React from \"react\";\nimport {BrowserRouter, Route, Switch  } from 'react-router-dom';\n\nimport { RegisterConnector } from \"../modules/register/RegisterConnector\";\n// import { RegisterView } from \"../modules/register/ui/RegisterView\";\n\nexport const Routes = () => (\n    <BrowserRouter>\n        <Switch>\n        {/* <div> <h1>Hello</h1></div>; */}\n            {/* <Route   path=\"/\" componet={<div><h1 color=\"blue\">Hello</h1></div>} /> */}\n            <Route exact={true} path=\"/register\" component={RegisterConnector} />\n        </Switch>\n    </BrowserRouter>\n);"],"sourceRoot":""}